"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
class DependencyManager {
    constructor(rootPath) {
        this.rootPath = rootPath;
    }
    installDependency() {
        try {
            this.runNpm();
        }
        catch (e) {
            console.debug(e);
        }
        // TO check if this is neccessary if we just download deps inside the workspace
        // await Promise.all(iterare.default(this.packageManager.packageJsonUris()).map(
        //     async uri => {
        //         console.log(uri)
        //     }
        // ))
    }
    shutdown() {
        // TODO check the best way to kill
        // TODO is this sync or async
        // console.debug('shutdowwn')
        // this.npmProcess.kill('SIGKILL')
    }
    runNpm() {
        const env = Object.create(process.env);
        env.TERM = 'dumb';
        const cwd = this.rootPath;
        // let cmd = 'yarn';
        //
        // if (existsSync(resolve(cwd, 'package-lock.json'))) {
        //     cmd = 'npm'
        // }
        if (!fs_1.existsSync(path_1.resolve(cwd, 'package.json'))) {
            return;
        }
        const yarnScript = require.resolve('yarn/bin/yarn.js');
        // console.error('Yarn script location' + yarnScript);
        // this.npmProcess =
        child_process_1.spawnSync(process.execPath, [
            yarnScript,
            'install',
            '--json',
            '--ignore-scripts',
            '--no-progress',
            '--non-interactive',
            '--ignore-engines',
        ], {
            env,
            cwd,
            stdio: 'inherit',
        });
        // this.npmProcess.stdout.on('data', data => {
        //     console.debug('stdout: ' + data)
        // })
        //
        // this.npmProcess.stderr.on('data', data => {
        //     console.debug('stderr:' + data)
        // })
        //
        // this.npmProcess.on('error', err => {
        //     console.debug('error:' + err)
        // })
    }
}
exports.DependencyManager = DependencyManager;
//# sourceMappingURL=dependency-manager.js.map